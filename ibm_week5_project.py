# -*- coding: utf-8 -*-
"""IBM_WEEK5_PROJECT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/113-RDvOBypiEjXhpXHbd0Bi9BSnBiBDe
"""

pip install pandas;

#Reading the dataset from URL

import pandas as pd
import matplotlib.pylab as plt

filename = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DA0101EN-SkillsNetwork/labs/Data%20files/auto.csv"

headers = ["symboling","normalized-losses","make","fuel-type","aspiration", "num-of-doors","body-style",
         "drive-wheels","engine-location","wheel-base", "length","width","height","curb-weight","engine-type",
         "num-of-cylinders", "engine-size","fuel-system","bore","stroke","compression-ratio","horsepower",
         "peak-rpm","city-mpg","highway-mpg","price"]

df = pd.read_csv(filename, names = headers)



df.head()

# Identify and handle missing value

import numpy as np

df.replace("?", np.nan, inplace = True)
df.head(5)

#Evaluating for missing data [isnull(), notnull()]

missing_data = df.isnull()
missing_data.head(5)

#count missing value
for column in missing_data.columns.values.tolist():
    print(column)
    print (missing_data[column].value_counts())
    print("")

# dealing with missing data

missing_data = df.isnull()

missing_data.head(5)

#count missing values in each column

for column in missing_data.columns.values.tolist():
    print(column)
    print (missing_data[column].value_counts())
    print("")

#calculate mean value for normalize-losses column
avg_norm_loss = df["normalized-losses"].astype("float").mean(axis=0)
print("Average of normalized-losses:", avg_norm_loss)

df["normalized-losses"].replace(np.nan, avg_norm_loss, inplace=True)

#calculate the mean value for bore column
avg_bore=df['bore'].astype('float').mean(axis=0)
print("Average of bore:", avg_bore)

"""#replace nan with stroke column with mean value"""

avg_stroke=df['stroke'].astype("float").mean(axis=0)
print(avg_stroke);

df['stroke'].replace(np.nan,avg_stroke,inplace= True)

avg_horsepower=df['horsepower'].astype('float').mean(axis=0)
print(avg_horsepower)

df['horsepower'].replace(np.nan,avg_horsepower,inplace=True)

avg_peakrpm=df['peak-rpm'].astype('float').mean(axis=0)
print(avg_peakrpm)

df['peak-rpm'].replace(np.nan,avg_peakrpm,inplace=True)

df['num-of-doors'].value_counts()

df['num-of-doors'].value_counts().idxmax()

# simply drop whole row with NaN in "price" column
df.dropna(subset=["price"], axis=0, inplace=True)

# reset index, because we droped two rows
df.reset_index(drop=True, inplace=True)

df.head()

# Convert mpg to L/100km by mathematical operation (235 divided by mpg)
df['city-L/100km'] = 235/df["city-mpg"]
df['highway-mpg'] = 235/df["highway-mpg"] df.rename(columns={'"highway-mpg"':'highway-L/100km'},inplace=True) df.head()

# check your transformed data
df.head()

df['length'] = df['length']/df['length'].max()
df['width'] = df['width']/df['width'].max()

df['height'] = df['height']/df['height'].max()
df[["length","width","height"]].head()

df["horsepower"]=df["horsepower"].astype(int, copy=True)

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib as plt
from matplotlib import pyplot
plt.pyplot.hist(df["horsepower"])

# set x/y labels and plot title
plt.pyplot.xlabel("horsepower")
plt.pyplot.ylabel("count")
plt.pyplot.title("horsepower bins")

bins = np.linspace(min(df["horsepower"]), max(df["horsepower"]), 4)
bins

group_names = ['Low', 'Medium', 'High']



df['horsepower-binned'] = pd.cut(df['horsepower'], bins, labels=group_names, include_lowest=True )
df[['horsepower','horsepower-binned']].head(20)

# no of vehicle in each bin

df["horsepower-binned"].value_counts()

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib as plt
from matplotlib import pyplot
pyplot.bar(group_names, df["horsepower-binned"].value_counts())

# set x/y labels and plot title
plt.pyplot.xlabel("horsepower")
plt.pyplot.ylabel("count")
plt.pyplot.title("horsepower bins")

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib as plt
from matplotlib import pyplot


# draw historgram of attribute "horsepower" with bins = 3
plt.pyplot.hist(df["horsepower"], bins = 3)

# set x/y labels and plot title
plt.pyplot.xlabel("horsepower")
plt.pyplot.ylabel("count")
plt.pyplot.title("horsepower bins")

#indicator value or dummies values
dummy_variable_1 = pd.get_dummies(df["fuel-type"])
dummy_variable_1.head()

dummy_variable_1.rename(columns={'gas':'fuel-type-gas', 'diesel':'fuel-type-diesel'}, inplace=True)
dummy_variable_1.head()

# merge data frame "df" and "dummy_variable_1"
df = pd.concat([df, dummy_variable_1], axis=1)

# drop original column "fuel-type" from "df"
df.drop("fuel-type", axis = 1, inplace=True)

df.head()

dummy_variable_2 = pd.get_dummies(df["aspiration"])
dummy_variable_2.head()

df=pd.concat([df,dummy_variable_2],axis=1)
df.drop('aspiration',axis=1,inplace=True)

df.to_csv('clean_df.csv')

import pandas as pd

# Assuming you have a DataFrame called 'df' containing your data

# Display the data type of each column
column_data_types = df.dtypes
print(column_data_types)